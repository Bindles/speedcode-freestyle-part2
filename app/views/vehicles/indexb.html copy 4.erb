<head>
  <script src="//unpkg.com/alpinejs" defer></script>
</head>

<%= turbo_stream_from 'vehicles' %>

<%= form_with url: vehicles_path, method: :get, data: { turbo: true }, id: "filterForm" do %>
  <div x-data="{ color: '', make: '' }" x-init="fetchVehicles()">
    <div>
      <label for="filterColor">Color:</label>
      <%= select_tag :color, 
          options_for_select(Vehicle.distinct.pluck(:color), params[:color]), 
          prompt: "Select a Color", 
          "x-model": "color", 
          "@change": "fetchVehicles()" %>
    </div>

    <div>
      <label for="filterMake">Make:</label>
      <%= select_tag :make, 
          options_for_select(Vehicle.distinct.pluck(:make), params[:make]), 
          prompt: "Select a Make", 
          "x-model": "make", 
          "@change": "fetchVehicles()" %>
    </div>

    <%= submit_tag "Filter" %> <!-- Optional, could be removed if fully using Alpine -->
  </div>
<% end %>

<table id="vehicleTable" x-data>
  <thead>
    <tr>
      <th>Make</th>
      <th>Model</th>
      <th>Color</th>
      <th>Price</th>
      <th>Type</th>
      <th>Type Specific Details</th>                
    </tr>
  </thead>
  <tbody id="vehicleRows">
    <% @vehicles.each do |vehicle| %>
      <tr>
        <td class="px-4 py-2 border-b"><%= vehicle.make %></td>
        <td class="px-4 py-2 border-b"><%= vehicle.model %></td>
        <td class="px-4 py-2 border-b"><%= vehicle.color %></td>
        <td class="px-4 py-2 border-b"><%= number_to_currency(vehicle.price) %></td>
        <td class="px-4 py-2 border-b"><%= vehicle.type %></td>
        <td class="px-4 py-2 border-b">
          <% if vehicle.type == "Car" %>
            <%= "Size: #{vehicle.size}, Engine: #{vehicle.engine_size}" %>
          <% elsif vehicle.type == "Bike" %>
            <%= "Top Speed: #{vehicle.top_speed} mph" %>
          <% end %>
        </td>
      </tr>
    <% end %>
  </tbody>
</table>

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('filterVehicles', () => ({
      color: '',
      make: '',
      fetchVehicles() {
        const url = new URL(window.location.href);

        // Update search parameters dynamically
        if (this.color) {
          url.searchParams.set('color', this.color);
        } else {
          url.searchParams.delete('color');
        }

        if (this.make) {
          url.searchParams.set('make', this.make);
        } else {
          url.searchParams.delete('make');
        }

        fetch(url)
          .then(response => response.text())
          .then(html => {
            // Update vehicle table without refreshing the page
            document.getElementById('vehicleTable').innerHTML = html;

            // Update browser history
            window.history.pushState({}, '', url);
          })
          .catch(error => console.error('Error fetching vehicles:', error));
      }
    }));
  });
</script>
